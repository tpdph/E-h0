{"functions":[{"id":"6642514e8a982adf7fb6342d","name":"O1","createdByID":70616,"folderID":null,"code":"export default async function main(args) {\n  // Extract input variables from args\n  const { last_utterance, openaiApiKey } = args.inputVars;\n\n  // Validate that the required input variables are provided\n  if (!last_utterance || !openaiApiKey) {\n    return {\n      next: { path: 'error' },\n      trace: [{ type: \"debug\", payload: { message: \"Missing required input variable: last_utterance or openaiApiKey\" } }]\n    };\n  }\n\n  // Define the URL for the OpenAI API\n  const url = `https://api.openai.com/v1/chat/completions`;\n\n  // Configure the request payload for the OpenAI API\n  const data = {\n    model: \"o1-preview\",\n    messages: [\n      {\n        \"role\": \"user\",\n        \"content\": last_utterance\n      }\n    ]\n  };\n\n  // Configure the fetch request headers and body\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${openaiApiKey}`\n    },\n    body: JSON.stringify(data)\n  };\n\n  try {\n    // Make the API call\n    const response = await fetch(url, config);\n\n    // Check if the response status is OK\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Parse the JSON response\n    const responseBody = await response.json;\n\n    // Validate the responseBody structure as expected\n    if (!responseBody || typeof responseBody !== 'object') {\n      throw new Error(\"Invalid or missing response body from the API\");\n    }\n\n    // Extract the response text from the completion\n    const completion = responseBody.choices[0].message.content;\n\n    // Create the success return object with extracted data\n    return {\n      outputVars: { completion },\n      next: { path: 'success' },\n      trace: [\n        {\n          type: \"text\",\n          payload: { message: `Received response from o1: ${completion}` }\n        }\n      ]\n    };\n  } catch (error) {\n    return {\n      next: { path: 'error' },\n      trace: [{ type: \"debug\", payload: { message: \"Error: \" + error.message } }]\n    };\n  }\n}","image":"https://cm4-production-assets.s3.amazonaws.com/1715622805465-openailogo.png","description":"Connect to O1, Open AI's new model","pathOrder":["6642514e8a982adf7fb63431","6642514e8a982adf7fb63432"],"createdAt":"2024-09-13T16:33:26.000Z","updatedAt":"2024-09-13T16:38:00.000Z","updatedByID":70616}],"functionPaths":[{"id":"6642514e8a982adf7fb63431","name":"error","label":"Error","functionID":"6642514e8a982adf7fb6342d","createdAt":"2024-09-13T16:33:26.084Z"},{"id":"6642514e8a982adf7fb63432","name":"success","label":"Success","functionID":"6642514e8a982adf7fb6342d","createdAt":"2024-09-13T16:33:26.085Z"}],"functionVariables":[{"id":"6642514e8a982adf7fb6342e","name":"last_utterance","type":"input","functionID":"6642514e8a982adf7fb6342d","description":"","createdAt":"2024-09-13T16:33:26.084Z"},{"id":"6642514e8a982adf7fb63430","name":"completion","type":"output","functionID":"6642514e8a982adf7fb6342d","description":"","createdAt":"2024-09-13T16:33:26.085Z"},{"id":"6642524b8a982adf7fb63439","name":"openaiApiKey","type":"input","functionID":"6642514e8a982adf7fb6342d","description":"","createdAt":"2024-09-13T16:33:26.086Z"}]}